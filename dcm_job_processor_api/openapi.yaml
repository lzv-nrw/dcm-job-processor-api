openapi: 3.0.3
info:
  title: DCM Job Processor - OpenAPI-Document
  description: |-
    This is the OpenAPI 3.0 specification describing the containers used
    for the job processor in the context of the dcm in the lzvnrw-project.
  version: 2.0.0
servers:
  - url: 'http://localhost:8080/'
externalDocs:
  description: See repository hosted by University of MÃ¼nster
  url: https://zivgitlab.uni-muenster.de/ULB/lzvnrw/team-se/dcm-job-processor-api
tags:
  - name: process
    description: job processor-related endpoints
paths:
  /ping:
    get:
      summary: ping
      description: Use as connection test. Returns 'pong'.
      operationId: ping
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: pong
        '400':
          $ref: '#/components/responses/400BadRequest'
  /status:
    get:
      summary: container status
      description: Returns Status (readiness) of container.
      operationId: get_status
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/400BadRequest'
  /identify:
    get:
      summary: container self-description
      description: Returns a detailed description of the container properties.
      operationId: identify
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelfDescription'
        '400':
          $ref: '#/components/responses/400BadRequest'
  /report:
    get:
      summary: get report
      description: |-
        Returns Report if the job associated with the given token exists.
      operationId: get_report
      tags:
        - process
      parameters:
        - $ref: '#/components/parameters/Token'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Report'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/JobData'
                    example:
                      data:
                        success: false
                        records:
                          /remote_storage/sip/abcde-12345:
                            completed: true
                            success: false
                            stages:
                              transfer:
                                completed: true
                                success: true
                                logId: 0@transfer_module
                              ingest:
                                completed: true
                                success: false
                                logId: 1@backend
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NoTarget'
        '503':
          $ref: '#/components/responses/503Busy'
  /progress:
    get:
      summary: get progress information
      description:
        Returns job status in processing pipeline if the job associated
        with the given token exists.
      operationId: get_progress
      tags:
        - process
      parameters:
        - $ref: '#/components/parameters/Token'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Progress'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NoTarget'
        '503':
          $ref: '#/components/responses/503Busy'
  /process:
    post:
      summary: process jobs
      description:
        Run a sequence of steps in the DCM processing pipeline and
        write generated logs to the database.
        If the request is accepted, a 201-response is triggered
        containing a JobToken.
      operationId: process
      tags:
        - process
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                process:
                  type: object
                  properties:
                    from:
                      $ref: '#/components/schemas/Stage'
                      example: import_ies
                    to:
                      $ref: '#/components/schemas/Stage'
                      example: ingest
                    args:
                      type: object
                      description: Stage-specific arguments
                      properties:
                        import_ies:
                          type: object
                          description:
                            Arguments for the import_ies stage.
                            See the Import Module API for more information.
                          additionalProperties: true
                        import_ips:
                          type: object
                          description: Arguments for the import_ips stage.
                            See the Import Module API for more information.
                          additionalProperties: true
                        build_ip:
                          type: object
                          description:
                            Arguments for the build_ip stage.
                            See the IP Builder API for more information.
                          additionalProperties: true
                        validation_metadata:
                          type: object
                          description:
                            Arguments for the validation_metadata stage.
                            See the IP Builder API for more information.
                          additionalProperties: true
                        validation_payload:
                          type: object
                          description:
                            Arguments for the validation_payload stage.
                            See the Object Validator API for more information.
                          additionalProperties: true
                        prepare_ip:
                          type: object
                          description:
                            Arguments for the prepare_ip stage.
                            See the Preparation Module API for more information.
                        build_sip:
                          type: object
                          description:
                            Arguments for the build_sip stage.
                            See the SIP Builder API for more information.
                          additionalProperties: true
                        transfer:
                          type: object
                          description:
                            Arguments for the transfer stage.
                            See the Transfer Module API for more information.
                          additionalProperties: true
                        ingest:
                          type: object
                          description:
                            Arguments for the ingest stage.
                            See the Backend API for more information.
                          additionalProperties: true
                  required:
                    - from
                    - args
                context:
                  title: JobContext
                  type: object
                  description: job execution context
                  properties:
                    jobConfigId:
                      $ref: '#/components/schemas/ConfigId'
                    userTriggered:
                      $ref: '#/components/schemas/ConfigId'
                    datetimeTriggered:
                      $ref: '#/components/schemas/ISODateTime'
                    triggerType:
                      type: string
                      description: |-
                        trigger type

                        if 'test', records are not written to the
                        database
                      enum:
                        - manual
                        - scheduled
                        - onetime
                        - test
                token:
                  type: string
                  description:
                    idempotency identifier; if submitted previously, returns
                    the associated job token; otherwise uses this value as
                    new token's value
                  example: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
                callbackUrl:
                  $ref: '#/components/schemas/CallbackUrl'
              required:
                - process
      callbacks:
        termination:
          $ref: '#/components/callbacks/termination'
      responses:
        '201':
          $ref: '#/components/responses/201AcceptedSubmission'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NoTarget'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
        '503':
          $ref: '#/components/responses/503Busy'
    delete:
      summary: abort job
      description:
        Aborts the execution of a job (if already running) or removes it
        from queue (otherwise). This operation is performed
        synchronously.
      operationId: abort
      tags:
        - process
      parameters:
        - $ref: '#/components/parameters/Token'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                origin:
                  type: string
                  description: verbose origin of request
                  example: frontend
                reason:
                  type: string
                  description: verbose reason for request
                  example: user abort
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                type: string
                example:
                  "successfully aborted '37ee72d6-80ab-4dcd-a68d-f8d32766c80d'"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '502':
          description: bad gateway
          content:
            text/plain:
              schema:
                type: string
                example:
                  "controller unavailable"
components:
  schemas:
    Status:
      title: ContainerStatus
      description:
        A ContainerStatus gives a summary of the container's status like
        availability for job submissions
      type: object
      properties:
        ready:
          type: boolean
          description: availability of container for a request
          example: true
      required:
        - ready
    ISODateTime:
      title: ISODateTime
      description: ISO-8601 datetime-stamp
      type: string
      pattern: /[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[+-][0-9]{2}:[0-9]{2}/
      example: "2024-01-01T00:00:00+01:00"
    ConfigId:
      title: ConfigId
      description: unique identifier
      type: string
      example: dab3e1bf-f655-4e57-938d-d6953612552b
    Token: # see also components/parameters/Token
      title: Token
      description: unique identifier
      type: string
      example: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
    JobToken:
      title: JobToken
      description:
        A JobToken is used to uniquely identify a specific job.
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Token'
        expires:
          type: boolean
          description: does the token expire
          example: true
        expires_at:
          $ref: '#/components/schemas/ISODateTime'
      required:
        - value
        - expires
    LogMessage:
      title: LogMessage
      description: |-
        This schema defines the format of the entries occurring in the
        log of a Report. A LogMessage consists of

        * datetime information (regarding time of message creation),
        * an origin (who filed this message), and
        * the actual message.
      type: object
      properties:
        datetime:
          $ref: '#/components/schemas/ISODateTime'
        origin:
          type: string
          description: origin of message creation
          example: Job Processor
        body:
          type: string
          description: message body
          example: Queued job.
      required:
        - datetime
        - origin
        - body
    Log:
      title: Log
      description: |-
        Common Log categories are: ERROR, WARNING, INFO, EVENT,
        NETWORK, FILE_SYSTEM, STARTUP, SHUTDOWN, USER,
        AUTHENTICATION, and SECURITY.
      type: object
      additionalProperties:
        title: LogCategory
        description: |-
          list of LogMessage objects
        type: array
        items:
          $ref: "#/components/schemas/LogMessage"
      example:
        EVENT:
          - datetime: "2024-01-01T00:00:00+01:00"
            origin: Job Processor
            body: Queued job.
          - datetime: "2024-01-01T00:00:02+01:00"
            origin: Job Processor
            body: Job exited normally.
    JobData:
      title: JobData
      description: |-
        job output data (data-property in Report schema)
      type: object
      properties:
        success:
          type: boolean
          description: overall success of the job
          example: true
        records:
          title: records
          type: object
          description:
            details about the running jobs;
            keys correspond to, e.g., the OAI identifier
          additionalProperties:
            type: object
            properties:
              completed:
                type: boolean
                description: whether still in progress
                example: true
              success:
                type: boolean
                description: overall success of the record
                example: true
              stages:
                type: object
                description:
                  details about stages for this record;
                  keys correspond to the identifiers given in the
                  Stage-schema 'components/schemas/Stage'
                additionalProperties:
                  type: object
                  properties:
                    completed:
                      type: boolean
                      description: whether the stage is still in progress
                      example: true
                    success:
                      type: boolean
                      description: overall success of the stage
                      example: false
                    logId:
                      $ref: '#/components/schemas/ReportIdentifier'
                  required:
                    - completed
            required:
              - stages
      required:
        - records
      example:
        success: false
        records:
          /remote_storage/sip/abcde-12345:
            completed: true
            success: false
            stages:
              transfer:
                completed: true
                success: true
                logId: 0@transfer_module
              ingest:
                completed: true
                success: false
                logId: 1@backend
    Report:
      title: Report
      description: |-
        A Report contains

        * information on job details (host, token),
        * information on the progress of a job,
        * a collection of log messages (categorized), and
        * job output data, and
        * reports for child processes spawned by this job.
      type: object
      properties:
        host:
          type: string
          description: service url where this report has been generated
          example: https://www.lzv.nrw/job_processor
        token:
          $ref: '#/components/schemas/JobToken'
        args:
          type: object
          description: request body contents given during submission
        progress:
          $ref: '#/components/schemas/Progress'
        log:
          $ref: '#/components/schemas/Log'
        children:
          type: object
          description: |-
            Reports of child jobs spawned in the context of this job;
            JSON-keys have the format '<identifier>@host' (following the
            ReportIdentifier schema)

            See SelfDescription.services for resolution of host
            identifier and host url.
          additionalProperties:
            allOf:
              - $ref: '#/components/schemas/Report'
              - type: object
                properties:
                  data: # No detailed reports of child jobs desired
                    type: object
      required:
        - host
        - token
        - args
        - progress
        - log
      example:
        host: https://www.lzv.nrw/job_processor
        token:
          value: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
          expires: true
          expires_at: "2024-01-01T00:00:00+01:00"
        args:
          from: transfer
          to: ingest
        progress:
          status: completed
          verbose: Job terminated normally.
          numeric: 100
        log:
          ERROR:
            - datetime: "2024-01-01T00:00:01+01:00"
              origin: Job Processor
              body: Problem occurred during running Job.
          EVENT:
            - datetime: "2024-01-01T00:00:00+01:00"
              origin: Job Processor
              body: Job accepted.
            - datetime: "2024-01-01T00:00:02+01:00"
              origin: Job Processor
              body: Job terminated.
    Progress:
      type: object
      properties:
        status:
          type: string
          description: job status in processing pipeline
          enum:
            - queued
            - running
            - aborted
            - completed
        verbose:
          type: string
          description: verbose description of job-progress
          example: waiting for response from service
        numeric:
          type: integer
          description: numeric representation of progress in percent
          example: 25
      required:
        - status
        - verbose
        - numeric
      example:
        status: completed
        verbose: shutting down after success
        numeric: 100
    ReportIdentifier:
      title: ReportIdentifier
      description:
        This type of identifier is used to identify a Report's child.
      type: string
      pattern: /[0-9a-zA-Z-_]+@[0-9a-zA-Z-_]+/
      example: 0@native
    CallbackUrl:
      type: string
      description: job-termination callback url
      example: https://www.lzv.nrw/callback
    Plugin:
      title: Plugin
      type: object
      description: DCM-service plugin
      properties:
        name:
          type: string
          description: plugin identifier
          example: plugin-0
        description:
          type: string
          description: description of plugin features
          example: this plugin performs ...
      required:
        - name
        - description
    DBAdapter:
      title: DBAdapter
      type: object
      description:
        A DBAdapter characterizes an adapter for a database by type and
        initialization settings.
      properties:
        type:
          type: string
          description: which adapter-type to use
          enum:
            - native
            - http
          example: http
        settings:
          type: object
          description: |-
            JSON object used to initialize the adapter

            adapter-specific set of settings (used during
            initialization); see dcm-common.db-subpackage for details
          additionalProperties: true
          example:
            url: https://www.lzv.nrw/db
            timeout: 10
            proxies:
              http: https://www.lzv.nrw/proxy
      required:
        - type
        - settings
    SelfDescription:
      type: object
      description: information regarding the service's properties
      properties:
        description:
          type: string
          description:
            a verbose self-description of the service functionality
          example:
            This service provides endpoints for ...
        version:
          type: object
          description: collection of version strings
          properties:
            api:
              type: string
              description: version string of the implemented API
              example: "0.2.0"
            app:
              type: string
              description: version string of the app
              example: "0.1.0"
            python:
              type: string
              description: version of the python implementation
              example: 3.10.12 (main, Mar 22 2024, 16:50:05) [GCC 11.4.0]
            software:
              type: object
              description: deployed software versions
            lib:
              type: object
              description: deployed library versions
              additionalProperties:
                type: string
                description: version string
                example: "0.1.0"
              example:
                dependency-a: "1.0.0"
                dependency-b: "0.2.0.post1"
          required:
            - api
            - app
            - python
            - software
            - lib
        configuration:
          type: object
          description: service configuration details
          properties:
            settings:
              type: object
              properties:
                allow_cors:
                  type: boolean
                  description: whether CORS requests are allowed
                  example: true
                orchestra:
                  type: object
                  description: orchestra-related settings
                  properties:
                    atStartup:
                      type: boolean
                      description:
                        whether orchestration-processing loop is run at startup
                      example: true
                    poolSize:
                      type: integer
                      description: number of worker-threads
                      example: 1
                    daemonInterval:
                      type: number
                      description: interval of orchestra-restarts in seconds
                      example: 1
                    controller:
                      type: object
                      description: controller settings
                      properties:
                        type:
                          type: string
                          description: controller type
                          example: sqlite
                        args:
                          type: object
                          description: controller arguments
                          additionalProperties: true
                          example:
                            lock_ttl: 30
                      required:
                        - type
                        - args
                    worker:
                      type: object
                      description: worker settings
                      properties:
                        args:
                          type: object
                          description: controller arguments
                          additionalProperties: true
                          example:
                            lock_refresh_interval: 10
                        interval:
                          type: number
                          description: interval of the worker loop in seconds
                          example: 1
                      required:
                        - args
                        - interval
                    abortTimeout:
                      type: number
                      description: duration for a timeout in an abort-request
                  required:
                    - atStartup
                    - poolSize
                    - daemonInterval
                    - controller
                    - worker
                    - abortTimeout
                database:
                  type: object
                  description:
                    database-related settings
                  properties:
                    adapter:
                      type: string
                      description: database adapter name
                      example: postgres
                    schemaVersion:
                      type: string
                      description: dcm-database schema version string
                      example: "1.0.0"
                    settings:
                      type: object
                      description: database-related settings
                      properties:
                        poolSize:
                          type: number
                          description: size of database connection-pool
                          example: 10
                        poolOverflow:
                          type: boolean
                          description:
                            whether to allow the pool to overflow during
                            high load (dynamically allocates more connections
                            when needed)
                          example: true
                        connectionTimeout:
                          type: number
                          nullable: true
                          description:
                            duration after which a database connection-
                            attempt times out; a value of null corresponds
                            to no timeout
                          example: 10.0
                        file:
                          type: string
                          nullable: true
                          description:
                            file path for a SQLite database (relative to
                            working directory); null corresponds to an
                            in-memory database
                          example: sqlite.db
                        host:
                          type: string
                          description: PostgreSQL host name
                          example: database
                        name:
                          type: string
                          description: PostgreSQL database name
                          example: dcm-database
                        user:
                          type: string
                          description: PostgreSQL user name
                          example: dcm
                        port:
                          type: string
                          description: PostgreSQL port
                          example: 5432
                        password:
                          type: boolean
                          description: whether PostgreSQL password is set
                          example: true
                        passfile:
                          type: string
                          description: PostgreSQL passfile path
                          example: pass
                  required:
                    - adapter
                    - schemaVersion
                    - settings
                process:
                  type: object
                  description: process-related settings
                  properties:
                    request_timeout:
                      type: object
                      description: timeout-related settings for the submission of a request to a service
                      properties:
                        duration:
                          type: integer
                          description: timeout duration in seconds
                          example: 30
                      required:
                        - duration
                    process_timeout:
                      type: object
                      description: timeout-related settings for the completion of a service job
                      properties:
                        duration:
                          type: integer
                          description: timeout duration in seconds
                          example: 30
                      required:
                        - duration
                  required:
                    - request_timeout
                    - process_timeout
              required:
                - allow_cors
                - orchestra
                - database
                - process
            plugins:
              type: object
              description: mapping of available plugins
              additionalProperties:
                $ref: "#/components/schemas/Plugin"
              example:
                plugin-0:
                  name: plugin-0
                  description: this plugin performs ...
            services:
              type: object
              description:
                mapping of hostname and url for secondary DCM-services
              additionalProperties:
                title: Service
                type: string
                format: url
              example:
                service: <service-url>
          required:
            - settings
            - plugins
            - services
      required:
        - description
        - version
        - configuration
    Stage:
      type: string
      description: |-
        Enumeration of possible stages for the starting or final module
        of the process chain.

        Stages can be organized into meta-stages
        (e.g., 'validation' and the subordinate 'validation_metadata'
        and 'validation_payload')

        The order is as follows:
        - import_ies/import_ips
        - build_ip (if applicable)
        - validation
          - validation_metadata
          - validation_payload
        - prepare_ip
        - build_sip
        - transfer
        - ingest
      enum:
        - import_ies
        - import_ips
        - build_ip
        - validation
        - validation_metadata
        - validation_payload
        - prepare_ip
        - build_sip
        - transfer
        - ingest
  parameters:
    Token: # see also components/schemas/Token
      in: query
      name: token
      required: true
      description:
        unique identifier for jobs
      example: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
      schema:
        $ref: '#/components/schemas/Token'
  responses:
    201AcceptedSubmission:
      description: submission success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JobToken'
    400BadRequest:
      description: malformed request body
      content:
        text/plain:
          schema:
            type: string
            example: "Missing required argument <X>"
    404NoTarget:
      description: target not found
      content:
        text/plain:
          schema:
            type: string
            example: "Resource not found. Target does not exist."
    422SemanticProblem:
      description: semantic problem
      content:
        text/plain:
          schema:
            type: string
            example: "Argument <X> has the wrong type"
    503Busy:
      description: container is busy
      content:
        text/plain:
          schema:
            type: string
            example: "Service unavailable: maximum number of submissions reached."
  callbacks:
    termination:
      '{$request.body#/CallbackUrl}':
        post:
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/JobToken'
          responses:
            '200':
              description: accept callback
